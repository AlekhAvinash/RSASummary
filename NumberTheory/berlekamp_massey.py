#!/usr/bin/python3
import numpy as np
from copy import copy
from lfsr import LFSR

def berlekamp_massey_algorithm(block_data):
	n = len(block_data)
	c = np.zeros(n)
	b = np.zeros(n)
	c[0], b[0] = 1, 1
	l, m, i = 0, -1, 0
	int_data = [int(el) for el in block_data]
	while i < n:
		v = int_data[(i - l):i]
		v = v[::-1]
		cc = c[1:l + 1]
		d = (int_data[i] + np.dot(v, cc)) % 2
		if d == 1:
			temp = copy(c)
			p = np.zeros(n)
			for j in range(0, l):
				if b[j] == 1:
					p[j + i - m] = 1
			c = (c + p) % 2
			if l <= 0.5 * i:
				l = i + 1 - l
				m = i
				b = temp
		i += 1
	return l,c[l:0:-1]

def main():
	inp
	
	ret = berlekamp_massey_algorithm(inp)
	
	seed = int(inp[ret[0]-1::-1],2)
	loc = [i+1 for i,j in enumerate(ret[1]) if(j)]
	
	clss = LFSR(seed,loc)
	print(clss.output(1100)[1000:])

if __name__ == '__main__':
	main()